import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.figurate:gradle-bundle-plugin:1.0.1-SNAPSHOT'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'java'
apply plugin: 'docker'

processResources {
    filter ReplaceTokens, tokens: [
            "projectName": project.property('projectName'),
            "projectId": project.property('projectId'),
            "projectUrl": project.property('projectUrl'),
            "projectDomain": (project.property('projectUrl') =~ /(?:https?:\/\/)(.*)/)[0][1],
            "organization": project.property('organization'),
            "gaTrackingId": project.property('gaTrackingId'),
            "disqusShortName": project.property('disqusShortName'),
            "currentYear": Calendar.instance.get(Calendar.YEAR) as String
    ]
}

jar.enabled = false

node {
    download = true

    version = '10.16.0'
    npmVersion = '6.9.0'
}

task buildWebpack(type: NpmTask) {
    args = ['run', 'buildWebpack']
}

task bundleApp(type:Jar) {
    manifest {
        attributes(
                'Sling-Initial-Content': "SLING-INF/content;path:=/apps/$projectId;overwrite:=true",
                'Bundle-Name': "$projectId-app",
                'Bundle-SymbolicName': "${project.name}.$projectId-app"
        )
    }
    baseName = "$projectId-app"
    from('src/app') { into 'SLING-INF/content' }
}

task bundleConfig(type:Jar) {
    manifest {
        attributes(
                'Sling-Initial-Content': 'SLING-INF/content;overwrite:=false',
                'Bundle-Name': "$projectId-config",
                'Bundle-SymbolicName': "${project.name}.$projectId-config"
        )
    }
    baseName = "$projectId-config"
    from('src/config') { into 'SLING-INF/content' }
}

task bundleContent(type:Jar) {
    manifest {
        attributes(
                'Sling-Initial-Content': "SLING-INF/content;path:=/content/$projectId;overwrite:=true",
                'Bundle-Name': "$projectId-content",
                'Bundle-SymbolicName': "${project.name}.$projectId-content"
        )
    }
    baseName = "$projectId-content"
    from('src/content') { into 'SLING-INF/content' }
}

bundleApp.dependsOn buildWebpack
buildWebpack.dependsOn yarn
clean.dependsOn yarn_cache_clean
build.dependsOn bundleApp, bundleConfig, bundleContent

artifacts {
    archives bundleApp
    archives bundleConfig
    archives bundleContent
}

docker {
    baseImage "micronode/whistlepost:${whistlepost_version}"
    maintainer organization
}

task buildDocker(type: Docker) {
    applicationName = project.name
    tagVersion = 'latest'
    push 'true' == docker_push
    apiUsername = docker_apiUsername
    apiPassword = docker_apiPassword
    apiEmail = docker_apiEmail
    configurations.archives.allArtifacts.findAll({it.file.exists()}).each {
        addFile it.file, "/opt/sling/sling/startup/${bundleStartLevel}/"
    }
    addFile 'sling.properties', '/opt/sling/'
    dependsOn build
}
